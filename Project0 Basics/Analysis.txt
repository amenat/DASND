## Task 0:

Since we have only used list indexing in this which is O(1); runtime of this whole program is O(1).


## Task 1:

Assuming each record is counted as 1 input. We have n = len(texts) + len(calls)

zip operation in this case just transposes the list which is O(n) operation
Concatenating lists is O(1) operation
Making a set is O(n) operation

Hence overall runtime of this solution is O(n)



## Task 2:

Assuming n = len(calls)

Transposing is O(n)
List concatenation is O(1)
Making a set is O(n)
Initializing an empty dictionary is O(n)

Updating dictionary for each call is O(n) operation.
Finding maximum item from unsorted iterable is O(n) operation

Hence overall runtime is O(n)



## Task 3

### Part A:

n = len(calls)

Filtering out bangalore calls = list comprehension with filter = O(n)
A for loop over all calls and update set = O(n)     Sidenote: blr_calls ⊆ calls

sorting area codes in alphabetical order is a tricky one to define. Sorting is O(x . log x) operation

But ideally number of area codes will never be close to n when n is big enough. Reminder that n is total number of calls. Number of area codes is going to be upper bounded by a constant; e.g. with 4 numbers maximum count of area codes is still 9999.

Overalll runtime of this program is O(n) with very high probability; in absolute worst cases where number of area codes are close to number of calls, it will be O(n log n).


### Part B:

Note: blr_calls ⊆ calls

assuming n = len(blr_calls)

list comprehension with filter is O(n)
counting len for arrays is O(1) operation hence calculation of ratio is O(1)


Overall runtime of this program is O(n)


## Task 4:

Looping over calls twice and texts once is all linear and hence O(n).

list comprehension with filter for creating list of telemarketers is O(n)

Sorting telemarketers: sorting is inherently O(x log x) problem; however, as numbers of telemarketers are going to much less than all possible numbers; we can say that runtime is still O(n) with very high probability.

Overall worst case runtime when no. of telemarketers are nearly same as all numbers = O(n logn)